name: Run all scrapers and open PR
on:
  workflow_dispatch:
  schedule:
    - cron: '0 */12 * * *'

permissions:
  contents: write          # נדרש כדי לדחוף ענפים ולמזג
  pull-requests: write     # נדרש ליצירה/מיזוג PR
  issues: write            # נדרש ליצירת labels אם חסרים

concurrency:
  group: scrapers-${{ github.workflow }}
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          ref: main

      - name: Sync with remote main
        run: |
          git fetch origin main
          git checkout main
          git reset --hard origin/main

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements_scraper.txt

      - name: Run all scrapers
        env:
          SERPER_API_KEY: ${{ secrets.SERPER_API_KEY }}
        run: python run_all.py

      - name: Check if merged_jobs.csv changed
        id: changes
        run: |
          if git diff --quiet -- merged_jobs.csv; then
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "No changes"
          else
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Changes detected"
          fi

      - name: Configure Git
        if: steps.changes.outputs.changed == 'true'
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Ensure labels exist
        if: steps.changes.outputs.changed == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api -X POST "repos/${{ github.repository }}/labels" \
            -f name='automation' -f color='ededed' -f description='Automated updates' || true
          gh api -X POST "repos/${{ github.repository }}/labels" \
            -f name='data-update' -f color='0366d6' -f description='Data update PRs' || true

      - name: Create branch, commit and push
        if: steps.changes.outputs.changed == 'true'
        id: push_branch
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          TS=$(date +%s)
          BRANCH="auto-update-${TS}"

          git checkout -b "$BRANCH"
          git add merged_jobs.csv
          git commit -m "Auto update merged_jobs.csv [skip ci]"
          git push --set-upstream origin "$BRANCH"

          echo "branch=$BRANCH" >> $GITHUB_OUTPUT

      - name: Open PR (with labels)
        if: steps.changes.outputs.changed == 'true'
        id: open_pr
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # צור PR
          PR_URL=$(gh pr create \
            --title "Auto update: merged_jobs.csv" \
            --body "Automated update of merged_jobs.csv generated by GitHub Actions." \
            --base main \
            --head "${{ steps.push_branch.outputs.branch }}" \
            --label "automation,data-update")
          echo "url=$PR_URL" >> $GITHUB_OUTPUT

          # שמור את המספר לזיהוי נוח
          PR_NUMBER=$(gh pr view "$PR_URL" --json number -q .number)
          echo "number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "Opened PR: #$PR_NUMBER ($PR_URL)"

      - name: Enable auto-merge / try immediate merge
        if: steps.changes.outputs.changed == 'true'
        id: merge_pr
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          PR="${{ steps.open_pr.outputs.number }}"

          # נעדיף Auto-merge (יעבוד רק אם Auto-merge מאופשר ב-Repo)
          if gh pr merge "$PR" --squash --auto --delete-branch; then
            echo "mode=auto" >> $GITHUB_OUTPUT
            echo "Auto-merge enabled for PR #$PR"
            exit 0
          fi

          # fallback: לנסות מיזוג מיידי (יעבוד רק אם אין הגנות/דרישות)
          if gh pr merge "$PR" --squash --delete-branch; then
            echo "mode=immediate" >> $GITHUB_OUTPUT
            echo "PR #$PR merged immediately"
            exit 0
          fi

          # אם לא הצליח—נשאיר את ה-PR פתוח עם Auto-merge לא פעיל
          echo "mode=pending" >> $GITHUB_OUTPUT
          echo "Could not enable auto-merge or merge immediately; PR stays open."

      - name: Wait for PR to be merged (poll up to ~5 minutes)
        if: steps.changes.outputs.changed == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR="${{ steps.open_pr.outputs.number }}"
          MODE="${{ steps.merge_pr.outputs.mode }}"
          # אם המיזוג כבר בוצע מיידית—אין מה להמתין
          if [ "$MODE" = "immediate" ]; then
            echo "Already merged."
            exit 0
          fi

          # אם Auto-merge הופעל—נחכה עד שיהיה merged (או עד timeout קצר)
          if [ "$MODE" = "auto" ]; then
            for i in $(seq 1 30); do  # 30*10ש' = ~5 דקות
              STATE=$(gh pr view "$PR" --json merged -q .merged || echo "false")
              if [ "$STATE" = "true" ]; then
                echo "PR merged."
                exit 0
              fi
              echo "Waiting for auto-merge (attempt $i/30)..."
              sleep 10
            done
            echo "Auto-merge still pending; continuing anyway."
            exit 0
          fi

          # אם לא הצלחנו להפעיל Auto-merge—נמשיך בלי להמתין
          echo "No auto-merge; continuing without waiting."

      - name: Sync local main after merge (best-effort)
        run: |
          git fetch origin main
          git checkout main
          git reset --hard origin/main || true
          git log -1 --oneline || true

      # מכאן אפשר להוסיף צעדים שנשענים על main המעודכן
      # - name: Deploy dashboard
      #   run: make deploy
