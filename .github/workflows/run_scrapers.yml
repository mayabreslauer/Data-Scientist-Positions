name: Run all scrapers and auto-merge PR
on:
  workflow_dispatch:
  schedule:
    - cron: '0 21 * * *'  # כל 24 שעות (00:00 ו-12:00 UTC)

permissions:
  contents: write
  pull-requests: write
  issues: write

concurrency:
  group: scrapers-${{ github.workflow }}
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          ref: main

      # עוצרים אם כבר יש PR פתוח של האוטומציה (headRefName שמתחיל ב-auto-update-)
      - name: Stop if an automation PR is already open
        id: pr_check
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          OPEN_AUTO_PR=$(gh pr list --state open --json number,headRefName -q '.[] | select(.headRefName|startswith("auto-update-")) | .number' | head -n1)
          if [ -n "$OPEN_AUTO_PR" ]; then
            echo "Found open automation PR #$OPEN_AUTO_PR. Stopping this run."
            echo "pr_open=true" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "No open automation PR."
            echo "pr_open=false" >> $GITHUB_OUTPUT
          fi

      - name: Sync with remote main
        if: steps.pr_check.outputs.pr_open == 'false'
        run: |
          git fetch origin main
          git checkout main
          git reset --hard origin/main

      - name: Set up Python
        if: steps.pr_check.outputs.pr_open == 'false'
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        if: steps.pr_check.outputs.pr_open == 'false'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements_scraper.txt

      - name: Run all scrapers
        if: steps.pr_check.outputs.pr_open == 'false'
        env:
          SERPER_API_KEY: ${{ secrets.SERPER_API_KEY }}
        run: python run_all.py

      - name: Check if merged_jobs.csv changed
        if: steps.pr_check.outputs.pr_open == 'false'
        id: changes
        run: |
          if git diff --quiet -- merged_jobs.csv; then
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "No changes"
          else
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Changes detected"
          fi

      - name: Configure Git
        if: steps.changes.outputs.changed == 'true' && steps.pr_check.outputs.pr_open == 'false'
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Ensure labels exist
        if: steps.changes.outputs.changed == 'true' && steps.pr_check.outputs.pr_open == 'false'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api -X POST "repos/${{ github.repository }}/labels" \
            -f name='automation' -f color='ededed' -f description='Automated updates' || true
          gh api -X POST "repos/${{ github.repository }}/labels" \
            -f name='data-update' -f color='0366d6' -f description='Data update PRs' || true

      - name: Create branch, commit and push
        if: steps.changes.outputs.changed == 'true' && steps.pr_check.outputs.pr_open == 'false'
        id: push_branch
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          TS=$(date +%s)
          BRANCH="auto-update-${TS}"

          git checkout -b "$BRANCH"
          git add merged_jobs.csv
          git commit -m "Auto update merged_jobs.csv [skip ci]"
          git push --set-upstream origin "$BRANCH"

          echo "branch=$BRANCH" >> $GITHUB_OUTPUT

      - name: Open PR (with labels)
        if: steps.changes.outputs.changed == 'true' && steps.pr_check.outputs.pr_open == 'false'
        id: open_pr
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_URL=$(gh pr create \
            --title "Auto update: merged_jobs.csv" \
            --body "Automated update of merged_jobs.csv generated by GitHub Actions." \
            --base main \
            --head "${{ steps.push_branch.outputs.branch }}" \
            --label "automation,data-update")
          echo "url=$PR_URL" >> $GITHUB_OUTPUT
          PR_NUMBER=$(gh pr view "$PR_URL" --json number -q .number)
          echo "number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "Opened PR: #$PR_NUMBER ($PR_URL)"

      - name: Enable auto-merge / try immediate merge
        if: steps.changes.outputs.changed == 'true' && steps.pr_check.outputs.pr_open == 'false'
        id: merge_pr
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          PR="${{ steps.open_pr.outputs.number }}"

          # העדפה: Auto-merge (יעבוד אם מאופשר בריפו)
          if gh pr merge "$PR" --squash --auto --delete-branch; then
            echo "mode=auto" >> $GITHUB_OUTPUT
            exit 0
          fi

          # fallback: ניסיון מיזוג מיידי (אם אין הגנות)
          if gh pr merge "$PR" --squash --delete-branch; then
            echo "mode=immediate" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "mode=pending" >> $GITHUB_OUTPUT

      - name: Wait for PR to be merged (short poll)
        if: steps.changes.outputs.changed == 'true' && steps.pr_check.outputs.pr_open == 'false'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR="${{ steps.open_pr.outputs.number }}"
          MODE="${{ steps.merge_pr.outputs.mode }}"

          # אם התמזג מיידית — לא ממתינים
          if [ "$MODE" = "immediate" ]; then
            exit 0
          fi

          # אם Auto-merge הופעל — נמתין עד 5 דק' (30*10ש')
          if [ "$MODE" = "auto" ]; then
            for i in $(seq 1 30); do
              STATE=$(gh pr view "$PR" --json state -q .state 2>/dev/null || echo "OPEN")
              if [ "$STATE" = "MERGED" ]; then
                exit 0
              fi
              sleep 10
            done
            echo "Auto-merge still pending; continuing."
            exit 0
          fi

          # אם לא הופעל Auto-merge — ממשיכים בלי להמתין
          exit 0
